# -*- coding: utf-8 -*-
# -------------------------------------------------------------------------
# This is a sample controller
# this file is released under public domain and you can use without limitations
# -------------------------------------------------------------------------
import applications.tcc_v1.controllers.publisher_web2py as pub

# ---- example index page ----
def index():
    response.flash = T("Hello World")
    return dict(message=T('Welcome to web2py!'))

def cadastrar_sala():
    formSalas = SQLFORM(Salas)
    if formSalas.process().accepted:
        codigo = formSalas.vars.bloco + str(formSalas.vars.numero)
        topicoEntrada = "topicoEntrada/" + codigo 
        topicoSaida = "topicoSaida/" + codigo 
        db((db.salas.bloco == formSalas.vars.bloco) & (db.salas.numero == formSalas.vars.numero)).update(codigo = codigo, topicoEntrada = topicoEntrada, topicoSaida = topicoSaida)
        session.flash = 'Sala %s cadastrada com sucesso.' % codigo
        redirect(URL('cadastrar_sala'))    
    elif formSalas.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'

    return dict(formSalas=formSalas)

def listar_salas():
    salas = db(Salas).select()
    return dict(salas=salas)

def cadastrar_usuario():
    formUsuarios = SQLFORM(Usuarios)
    if formUsuarios.process().accepted:
        session.flash = 'Novo usuário cadastrado: %s' % formUsuarios.vars.nome
        redirect(URL('cadastrar_usuario'))
    elif formUsuarios.errors:
        response.flash = 'Erros no formulário!'
    else:
        response.flash = 'Preencha o formulário!'
    return dict(formUsuarios=formUsuarios)

def listar_usuarios():
    usuarios = db(Usuarios).select()
    return dict(usuarios=usuarios)

def associar_tag_usuario():
    associarTagUser = SQLFORM.factory(Field('sala_controle', 'string', label="Selecione o código da sala:", requires=IS_IN_DB(db, Salas.codigo)))
    if associarTagUser.process().accepted:
        topicoEntrada = db((db.salas.codigo == associarTagUser.vars.sala_controle) & (db.salas.status == True)).select(db.salas.topicoEntrada)
        print(topicoEntrada[0].topicoEntrada)
        pub.Publish_Associar_Tag_User(str(topicoEntrada[0].topicoEntrada))
    elif associarTagUser.errors:
        response.flash = 'Erros no formulário!'
    return dict(associarTagUser=associarTagUser)

def associar_tag_master():
    associarTagMaster = SQLFORM.factory(Field('sala_controle', 'string', label="Selecione o código da sala:", requires=IS_IN_DB(db, Salas.codigo)))
    if associarTagMaster.process().accepted:
        topicoEntrada = db((db.salas.codigo == associarTagMaster.vars.sala_controle) & (db.salas.status == True)).select(db.salas.topicoEntrada)
        print(topicoEntrada[0].topicoEntrada)
        pub.Publish_Associar_Tag_Master(str(topicoEntrada[0].topicoEntrada))
    elif associarTagMaster.errors:
        response.flash = 'Erros no formulário!'
    return dict(associarTagMaster=associarTagMaster)

def agendamento():
    return dict()
    
# ---- API (example) -----
@auth.requires_login()
def api_get_user_email():
    if not request.env.request_method == 'GET': raise HTTP(403)
    return response.json({'status':'success', 'email':auth.user.email})

# ---- Smart Grid (example) -----
@auth.requires_membership('admin') # can only be accessed by members of admin groupd
def grid():
    response.view = 'generic.html' # use a generic view
    tablename = request.args(0)
    if not tablename in db.tables: raise HTTP(403)
    grid = SQLFORM.smartgrid(db[tablename], args=[tablename], deletable=False, editable=False)
    return dict(grid=grid)

# ---- Embedded wiki (example) ----
def wiki():
    auth.wikimenu() # add the wiki to the menu
    return auth.wiki() 

# ---- Action for login/register/etc (required for auth) -----
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())

# ---- action to server uploaded static content (required) ---
@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)
